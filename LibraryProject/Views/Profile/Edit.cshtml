@model LibraryProject.Models.Profile

@{
    ViewBag.Title = "Edit";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <h4>Edytuj profil</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ID)
    @Html.HiddenFor(model => model.Login)
    @Html.HiddenFor(model => model.geoLocationLat)
    @Html.HiddenFor(model => model.geoLocationLng)

    <div class="form-row">
        <div class="form-group col-md-5">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-md-5">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-row">
        <div class="form-group col-md-5">
            @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-5" })
            @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-md-5">
            @Html.LabelFor(model => model.BirthDate, htmlAttributes: new { @class = "control-label col-md-5" })
            @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @class = "form-control" }, @type = "date" })
            @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="row">
        <div class="col-md-5">
            <div class="form-row">
                @Html.LabelFor(model => model.Street, htmlAttributes: new { @class = "control-label col-md-5" })
                @Html.EditorFor(model => model.Street, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Street, "", new { @class = "text-danger" })
            </div>
            <div class="form-row">
                @Html.LabelFor(model => model.HouseNumber, htmlAttributes: new { @class = "control-label col-md-5" })
                @Html.EditorFor(model => model.HouseNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.HouseNumber, "", new { @class = "text-danger" })
            </div>
            <div class="form-row">
                @Html.LabelFor(model => model.PostalCode, htmlAttributes: new { @class = "control-label col-md-5" })
                @Html.EditorFor(model => model.PostalCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PostalCode, "", new { @class = "text-danger" })
            </div>
            <div class="form-row">
                @Html.LabelFor(model => model.Town, htmlAttributes: new { @class = "control-label col-md-5" })
                @Html.EditorFor(model => model.Town, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Town, "", new { @class = "text-danger" })
            </div>
            <div class="form-row">
                <a id="submitButton" class="btn btn-primary">Szukaj</a>
            </div>
        </div>
        <div class="col-md-7">
            <div id="map" style="height:500px"></div>
        </div>
    </div>

    <div class="form-group">
        <a class="btn btn-info" href="@Url.Action("Index", "Profile")">Powrót</a>
        <input type="submit" value="Zapisz" class="btn btn-success" />
    </div>
}

@section Scripts
{
    <script>
        let map;
        let marker;
        let geocoder;

        function initMap() {
            map = new google.maps.Map(document.getElementById("map"), {
                zoom: 11,
                center: { lat: 52.2330653, lng: 20.921114 },
                mapTypeControl: false,
            });
            geocoder = new google.maps.Geocoder();

            var street = document.getElementById('Street');
            var houseNumber = document.getElementById('HouseNumber');
            var postalCode = document.getElementById('PostalCode');
            var town = document.getElementById('Town');
            var geoLocationLat = document.getElementById('geoLocationLat');
            var geoLocationLng = document.getElementById('geoLocationLng');
            var submitButton = document.getElementById('submitButton');

            marker = new google.maps.Marker({
                map,
            });
            submitButton.addEventListener("click", () =>
                geocode({ address: street.value + houseNumber.value + town.value + postalCode.value })
            );
            if (street.value.length != 0 || houseNumber.value.length != 0 || postalCode.value.length != 0 || town.value.length != 0) {
                geocode({ address: street.value + houseNumber.value + town.value + postalCode.value })
            }
            clear();
        }

        function clear() {
            marker.setMap(null);
        }

        function geocode(request) {
            clear();
            geocoder
                .geocode(request)
                .then((result) => {
                    const { results } = result;
                    map.setZoom(17);
                    map.setCenter(results[0].geometry.location);
                    marker.setPosition(results[0].geometry.location);
                    marker.setMap(map);
                    geoLocationLat.value = JSON.stringify(results[0].geometry.location.lat(), null, 2);
                    geoLocationLng.value = JSON.stringify(results[0].geometry.location.lng(), null, 2);

                    return results;
                })
                .catch((e) => {
                    alert("Geocode was not successful for the following reason: " + e);
                });
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=@(LibraryProject.Properties.Settings.Default.GoogleMapsApiKey)&callback=initMap&v=weekly" async></script>
}
